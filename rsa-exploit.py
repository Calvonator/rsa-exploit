from Crypto.PublicKey import RSA
from Crypto.Util.number import bytes_to_long
import owiener
#Imported for the Owiener attack

def getPublicKey(publicKeyFile):
    with open(publicKeyFile) as pub:
        key = RSA.importKey(pub.read())
        return (key.n, key.e)

def getCipherText(cipherTextFile):
    with open(cipherTextFile, 'rb') as ct:
        return bytes_to_long(ct.read())

def wienerAttack(e, n):
    return owiener.attack(e, n)

def decrypt(publicModulus, privateKey, cipherText):
    plainText = pow(cipherText, privateKey, publicModulus)
    return plainText

    

publicKeyFile = input("\nPublic Key filename: ")
publicModulus, publicExponent = getPublicKey(publicKeyFile)

cipherFile = input("\nCipher Text filename: ")
cipher = getCipherText(cipherFile)

privateKey = wienerAttack(publicExponent, publicModulus)

plainText = decrypt(publicModulus, privateKey, cipherFile)

file = open("plaintext.txt", "x")
file.write(plainText)
file.close()

print("\nFile Decrypted")



